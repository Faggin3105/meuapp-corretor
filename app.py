import streamlit as st
import pandas as pd
import joblib
import matplotlib.pyplot as plt
import seaborn as sns

# Carregar modelo e codificadores
modelo = joblib.load("models/modelo_avaliacao.joblib")
le_dict = joblib.load("models/label_encoders.joblib")
colunas_modelo = joblib.load("models/colunas_modelo.joblib")
estados_cidades_bairros = joblib.load("models/estados_cidades_bairros.joblib")

# Menu lateral
st.set_page_config(page_title="Avalia√ß√£o de Im√≥veis da Orla", layout="centered")
menu = st.sidebar.selectbox("Escolha uma funcionalidade:", [
    "Avalia√ß√£o de Im√≥veis",
    "Cria√ß√£o de Contratos",
    "Posi√ß√£o Solar",
    "Calculadora Financeira",
    "Simulador de Investimento",
    "Consulta de √çndices",
    "Not√≠cias do Mercado",
    "Dicion√°rio do Corretor",
    "Biblioteca do Corretor",
    "Universidade do Corretor",
    "An√°lise de Perfil de Cliente",
    "Agenda de Eventos"
])

if menu == "Avalia√ß√£o de Im√≥veis":
    st.title("Avalia√ß√£o de Im√≥veis da Orla")

    # Sele√ß√£o din√¢mica: Estado ‚Üí Cidade ‚Üí Bairro
    estado = st.selectbox("Estado", list(estados_cidades_bairros.keys()), key="estado")
    cidades = list(estados_cidades_bairros[estado].keys())
    cidade = st.selectbox("Cidade", cidades, key="cidade")
    bairros = estados_cidades_bairros[estado][cidade]
    bairro = st.selectbox("Bairro", bairros, key="bairro")

    # Demais entradas
    tipo = st.selectbox("Tipo do Im√≥vel", le_dict['tipo'].classes_)
    m2 = st.slider("√Årea (m¬≤)", min_value=10, max_value=2000, step=10)
    quartos = st.slider("Quartos", min_value=0, max_value=10, step=1)
    banheiros = st.slider("Banheiros", min_value=0, max_value=10, step=1)
    garagem = st.slider("Vagas de Garagem", min_value=0, max_value=10, step=1)
    ano = st.slider("Ano de Constru√ß√£o", min_value=1900, max_value=2025, step=1)
    mobilia = st.selectbox("Mobilia", le_dict['mobilia'].classes_)

    if st.button("Avaliar Im√≥vel"):
        try:
            entrada = pd.DataFrame([{
                'estado': le_dict['estado'].transform([estado])[0],
                'cidade': le_dict['cidade'].transform([cidade])[0],
                'bairro': le_dict['bairro'].transform([bairro])[0],
                'tipo': le_dict['tipo'].transform([tipo])[0],
                'm2': m2,
                'quartos': quartos,
                'banheiros': banheiros,
                'garagem': garagem,
                'ano': ano,
                'mobilia': le_dict['mobilia'].transform([mobilia])[0]
            }])[colunas_modelo]

            valor_estimado = modelo.predict(entrada)[0]
            valor_m2 = valor_estimado / m2 if m2 else 0

            st.success(f"üí∞ Valor estimado: R$ {valor_estimado:,.2f}")
            st.info(f"üìê Valor por m¬≤: R$ {valor_m2:,.2f}")

            # Exibir gr√°fico de distribui√ß√£o por faixa de pre√ßo
            df = pd.read_csv("data/dataset_imoveis.csv")
            df['faixa'] = pd.cut(df['valor'], bins=[0,200000,400000,600000,800000,1000000,1500000],
                                  labels=["At√© 200k", "200k-400k", "400k-600k", "600k-800k", "800k-1M", "1M+"])
            fig, ax = plt.subplots(figsize=(8, 5))
            sns.set_style("whitegrid")
            sns.countplot(data=df, x='faixa', palette='coolwarm', ax=ax)
            ax.set_title("Distribui√ß√£o de Im√≥veis por Faixa de Pre√ßo", fontsize=14, fontweight='bold')
            ax.set_xlabel("Faixa de Pre√ßo", fontsize=12)
            ax.set_ylabel("Quantidade de Im√≥veis", fontsize=12)
            for container in ax.containers:
                ax.bar_label(container, fmt='%d', label_type='edge', fontsize=10)
            st.pyplot(fig)

        except Exception as e:
            st.error(f"Erro na avalia√ß√£o: {str(e)}")
else:
    st.title(f"{menu}")
    st.info("Funcionalidade em constru√ß√£o... em breve!")